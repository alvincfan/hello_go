// Code generated by MockGen. DO NOT EDIT.
// Source: dealershipManager.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	domain "hello_go/domain"
	reflect "reflect"
)

// MockDealershipManager is a mock of DealershipManager interface
type MockDealershipManager struct {
	ctrl     *gomock.Controller
	recorder *MockDealershipManagerMockRecorder
}

// MockDealershipManagerMockRecorder is the mock recorder for MockDealershipManager
type MockDealershipManagerMockRecorder struct {
	mock *MockDealershipManager
}

// NewMockDealershipManager creates a new mock instance
func NewMockDealershipManager(ctrl *gomock.Controller) *MockDealershipManager {
	mock := &MockDealershipManager{ctrl: ctrl}
	mock.recorder = &MockDealershipManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDealershipManager) EXPECT() *MockDealershipManagerMockRecorder {
	return m.recorder
}

// GetAllDealership mocks base method
func (m *MockDealershipManager) GetAllDealership() map[string]*domain.Dealership {
	ret := m.ctrl.Call(m, "GetAllDealership")
	ret0, _ := ret[0].(map[string]*domain.Dealership)
	return ret0
}

// GetAllDealership indicates an expected call of GetAllDealership
func (mr *MockDealershipManagerMockRecorder) GetAllDealership() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDealership", reflect.TypeOf((*MockDealershipManager)(nil).GetAllDealership))
}

// AddDealership mocks base method
func (m *MockDealershipManager) AddDealership(dealership *domain.Dealership) error {
	ret := m.ctrl.Call(m, "AddDealership", dealership)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDealership indicates an expected call of AddDealership
func (mr *MockDealershipManagerMockRecorder) AddDealership(dealership interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDealership", reflect.TypeOf((*MockDealershipManager)(nil).AddDealership), dealership)
}

// GetDealership mocks base method
func (m *MockDealershipManager) GetDealership(dealershipID string) *domain.Dealership {
	ret := m.ctrl.Call(m, "GetDealership", dealershipID)
	ret0, _ := ret[0].(*domain.Dealership)
	return ret0
}

// GetDealership indicates an expected call of GetDealership
func (mr *MockDealershipManagerMockRecorder) GetDealership(dealershipID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDealership", reflect.TypeOf((*MockDealershipManager)(nil).GetDealership), dealershipID)
}

// RemoveDealership mocks base method
func (m *MockDealershipManager) RemoveDealership(dealershipID string) error {
	ret := m.ctrl.Call(m, "RemoveDealership", dealershipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDealership indicates an expected call of RemoveDealership
func (mr *MockDealershipManagerMockRecorder) RemoveDealership(dealershipID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDealership", reflect.TypeOf((*MockDealershipManager)(nil).RemoveDealership), dealershipID)
}

// AddGroundInventory mocks base method
func (m *MockDealershipManager) AddGroundInventory(dealershipID string, ground *domain.GroundTransportation) error {
	ret := m.ctrl.Call(m, "AddGroundInventory", dealershipID, ground)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroundInventory indicates an expected call of AddGroundInventory
func (mr *MockDealershipManagerMockRecorder) AddGroundInventory(dealershipID, ground interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroundInventory", reflect.TypeOf((*MockDealershipManager)(nil).AddGroundInventory), dealershipID, ground)
}

// GetGroundInventory mocks base method
func (m *MockDealershipManager) GetGroundInventory(dealershipID, serialNumber string) (*domain.GroundTransportation, error) {
	ret := m.ctrl.Call(m, "GetGroundInventory", dealershipID, serialNumber)
	ret0, _ := ret[0].(*domain.GroundTransportation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroundInventory indicates an expected call of GetGroundInventory
func (mr *MockDealershipManagerMockRecorder) GetGroundInventory(dealershipID, serialNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroundInventory", reflect.TypeOf((*MockDealershipManager)(nil).GetGroundInventory), dealershipID, serialNumber)
}

// MoveGroundInventory mocks base method
func (m *MockDealershipManager) MoveGroundInventory(dealershipID, serialNumber string) error {
	ret := m.ctrl.Call(m, "MoveGroundInventory", dealershipID, serialNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveGroundInventory indicates an expected call of MoveGroundInventory
func (mr *MockDealershipManagerMockRecorder) MoveGroundInventory(dealershipID, serialNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveGroundInventory", reflect.TypeOf((*MockDealershipManager)(nil).MoveGroundInventory), dealershipID, serialNumber)
}

// SoldGroundInventory mocks base method
func (m *MockDealershipManager) SoldGroundInventory(dealershipID, serialNumber string, owner *domain.Owner) error {
	ret := m.ctrl.Call(m, "SoldGroundInventory", dealershipID, serialNumber, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoldGroundInventory indicates an expected call of SoldGroundInventory
func (mr *MockDealershipManagerMockRecorder) SoldGroundInventory(dealershipID, serialNumber, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoldGroundInventory", reflect.TypeOf((*MockDealershipManager)(nil).SoldGroundInventory), dealershipID, serialNumber, owner)
}
